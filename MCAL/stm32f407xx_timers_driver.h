/*
 * stm32f407xx_timers_driver.h
 *
 *  Created on: Feb 18, 2019
 *      Author: WE72 7RJ
 */

#include "stm32f4xx.h"

/************************************ Timers Manipulation Macros **********************************/

#define Timer_WriteBit(REG, DATA , BIT)	((REG) = ((uint32_t) ((REG) & ~(1U<<BIT))|((DATA)<<(BIT))) )

/* Macro to Enable TIM_IRQ */

#define TIM_INT_ENABLE(SPI_IRQN)	(NVIC_EnableIRQ(SPI_IRQN))

/* Macro to Disable TIM_IRQ */
#define TIM_INT_DISABLE(SPI_IRQN)	(NVIC_DisableIRQ(SPI_IRQN))


/**************************************************************************************************/
/* 										1- Basic Timers 										  */
/**************************************************************************************************/

/********************************************************************/
/*						1.1 Register bit defination 				*/
/********************************************************************/

/*************** TIM6&TIM7 control register 1 ***************/

#define BT_REG_CR1_ARPE			((uint32_t) 7U)	//Auto-reload preload enable
#define BT_ARPE_DISABLE			(0U)
#define BT_ARPE_ENABLE			(1U) //ARR BUFFERED

#define BT_REG_CR1_OPM			((uint32_t) 3U)	//One-pulse mode
#define BT_OPM_DISABLE			(0U)
#define BT_OPM_ENABLE			(1U)

#define BT_REG_CR1_URS			((uint32_t) 2U) //Update request source
#define BT_URS_ENABLE			(0U)	//Interrupt generated by those(– Counter overflow/underflow-Setting the UG bit-Update generation through the slave mode controller
#define BT_URS_DISABLE			(1U)	// Only counter overflow/underflow generates an update interrupt

#define BT_REG_CR1_UDIS			((uint32_t) 1U)	//Update disable
#define BT_UDIS_ENABLE			(0U)	//Update generated by those(Counter overflow/underflow-Setting the UG bit-Update generation through the slave mode controller)
#define	BT_UDIS_DISABLE			(1U)	//NO update event generated

#define BT_REG_CR1_CEN			((uint32_t) 0U) //Counter enable
#define BT_CEN_DISABLE			(0U) //counter register not counting
#define BT_CEN_ENABLE			(1U)

/*************** TIM6&TIM7 control register 2 ***************/

//Dont know what it is doing!

/*************** TIM6&TIM7 DMA/Interrupt enable register*****/

#define BT_REG_DIER_UIE			((uint32_t) 0U) // INTERRUPT ENABLE
#define BT_UIE_DISABLE			(0U)
#define BT_UIE_ENABLE			(1U)

/*************** TIM6&TIM7 status register ******************/

#define BT_REG_SR_UIF			((uint32_t) 0U) // Update interrupt FLAG
#define BT_UIF_Clear			(0U)

/*************** TIM6&TIM7 event generation register ********/

#define BT_REG_EGR_UG 			((uint32_t) 0U)	// Update generation
#define BT_UG_NO_ACTION			(0U)
#define BT_UG_UPDATE			(0U)	// Re-initializes the timer counter and generates an update of the registers

/*************** Basic Timers Macros ************************/

#define	BT_TIM_6		(TIM6)
#define BT_TIM_7		(TIM7)

/*************** Constant ***********************************/

#define ON			(1U)
#define OFF			(0U)


/********************************************************************/
/*						1.2 Structures & typedefs	 				*/
/********************************************************************/

#define BT_ARR_INITIAL_VALUE		(0U)
#define BT_PRESCALAR_AUTOMATIC		(0U)
#define BT_COUNTSTARTVALUE_DEFAULT	(0U)

typedef enum
{
	BT_STATE_RESET = 0U,
	BT_STATE_INITIALIZED = 1U

}BT_State_t;

typedef enum
{
	BT_TIMESCALE_SEC 	= 1U,
	BT_TIMESCALE_MILI	= 1000U,
	BT_TIMESCALE_MICRO  = 1000000UL
}BT_TimeScale_t;

typedef enum
{
	BT_PRELOAD_DISABLE = 0x00U,
	BT_PRELOAD_ENABLE = 0x01U
}BT_Preload_Bit;
typedef enum
{
	BT_MODE_1SHOT_NO_EVENT	   = 0x10U,
	BT_MODE_1SHOT_EVENT_OF 	   = 0x11U,
	BT_MODE_1SHOT_EVENT_UG 	   = 0x12U,
	BT_MODE_1SHOT_INTERRUPT_OF = 0x13U,
	BT_MODE_1SHOT_INTERRUPT_UG = 0x14U,
	BT_MODE_CONT_NO_EVENT	   = 0x20U,
	BT_MODE_CONT_EVENT_OF 	   = 0x21U,
	BT_MODE_CONT_EVENT_UG 	   = 0x22U,
	BT_MODE_CONT_INTERRUPT_OF  = 0x23U,
	BT_MODE_CONT_INTERRUPT_UG  = 0x24U
}BT_Mode_t;

typedef struct
{
	uint32_t mode;
	uint32_t period;
	uint32_t ARR_Value;
	uint32_t prescalar;
	BT_TimeScale_t TimeScale;
	BT_Preload_Bit Preload_ARR;
	uint16_t CountStartValue;
}BT_Init_t;

typedef struct
{
	TIM_TypeDef *instance;
	BT_Init_t	*init;
	BT_State_t  state;

}BT_HandleStruct_t;

/********************************************************************/
/*						1.3 Functions Prototypes & Macros			*/
/********************************************************************/
/* Public Functions & MACROS */

/************ Clock gating **********/
#define RCC_btTIM6_CLK_EN()	(RCC->APB1ENR = RCC_APB1ENR_TIM6EN)
#define RCC_btTIM7_CLK_EN()	(RCC->APB1ENR = RCC_APB1ENR_TIM7EN)

/*************** functions **********/
#define BT_ClearPendingIT(HANDLE)	(Timer_WriteBit(HANDLE.instance->SR,BT_UIF_Clear,BT_REG_SR_UIF))
#define BT_StatusOnOrOff(STRUC, STATE)	((STATE)?(Timer_WriteBit(STRUC.instance->CR1,BT_CEN_ENABLE,BT_REG_CR1_CEN)):(Timer_WriteBit(STRUC.instance->CR1,BT_CEN_DISABLE,BT_REG_CR1_CEN)))
#define BT_PeriodCalculator(HANDLE,TIME,START)	((HANDLE->init->ARR_Value) = ((uint32_t)((((SystemCoreClock)*((TIME)-(START)))/(((HANDLE->init->prescalar)+1U) * (HANDLE->init->TimeScale)))-1U)))





void BT_Init(BT_HandleStruct_t * btHandle);


/**************************************************************************************************/
/* 									2- General Purpose Timers 									  */
/**************************************************************************************************/

/********************************************************************/
/*						2.1 Register bit defination 				*/
/********************************************************************/

/*************** TIM6&TIM7 control register 1 ***************/

#define BT_REG_CR1_ARPE			((uint32_t) 7U)	//Auto-reload preload enable
#define BT_ARPE_DISABLE			(0U)
#define BT_ARPE_ENABLE			(1U) //ARR BUFFERED

#define BT_REG_CR1_OPM			((uint32_t) 3U)	//One-pulse mode
#define BT_OPM_DISABLE			(0U)
#define BT_OPM_ENABLE			(1U)

#define BT_REG_CR1_URS			((uint32_t) 2U) //Update request source
#define BT_URS_ENABLE			(0U)	//Interrupt generated by those(– Counter overflow/underflow-Setting the UG bit-Update generation through the slave mode controller
#define BT_URS_DISABLE			(1U)	// Only counter overflow/underflow generates an update interrupt

#define BT_REG_CR1_UDIS			((uint32_t) 1U)	//Update disable
#define BT_UDIS_ENABLE			(0U)	//Update generated by those(Counter overflow/underflow-Setting the UG bit-Update generation through the slave mode controller)
#define	BT_UDIS_DISABLE			(1U)	//NO update event generated

#define BT_REG_CR1_CEN			((uint32_t) 0U) //Counter enable
#define BT_CEN_DISABLE			(0U) //counter register not counting
#define BT_CEN_ENABLE			(1U)





























